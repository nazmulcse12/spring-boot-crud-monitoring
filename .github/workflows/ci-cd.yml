name: CI/CD Pipeline

# Trigger the workflow on push to main branch and pull requests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Define environment variables
env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.8.6'

jobs:
  # Job 1: Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Set up Java
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    # Step 3: Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    # Step 4: Run tests
    - name: Run tests
      run: mvn clean test
    
    # Step 5: Build the application
    - name: Build with Maven
      run: mvn clean package -DskipTests
    
    # Step 6: Upload build artifacts
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-app
        path: target/*.jar

  # Job 2: Docker Build and Push (runs after test-and-build)
  docker-build:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Download build artifacts
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-app
        path: target/
    
    # Step 3: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Step 4: Log in to Docker Hub (optional - for pushing to registry)
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Step 5: Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          your-dockerhub-username/spring-boot-crud-app:latest
          your-dockerhub-username/spring-boot-crud-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Integration Tests with Docker Compose
  integration-tests:
    needs: test-and-build
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Download build artifacts
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-app
        path: target/
    
    # Step 3: Run integration tests with Docker Compose
    - name: Run integration tests
      run: |
        # Start services
        docker-compose up -d
        
        # Wait for application to be ready
        sleep 30
        
        # Run basic health checks
        curl -f http://localhost:8080/actuator/health || exit 1
        curl -f http://localhost:9090/-/healthy || exit 1
        curl -f http://localhost:3000/api/health || exit 1
        
        # Test API endpoints
        curl -X POST -H "Content-Type: application/json" \
             -d '{"name":"Test Product","price":25.99}' \
             http://localhost:8080/api/products || exit 1
        
        curl -f http://localhost:8080/api/products || exit 1
    
    # Step 4: Cleanup
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Job 4: Security Scan (optional)
  security-scan:
    needs: test-and-build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'